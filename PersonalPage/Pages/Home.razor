@page "/"

@using PersonalPage.Components.Reusable




@if (displayDiskDeletion)
{
    <PageTitle>oh noooo!</PageTitle>

    <h1>Computer destruction in progress...</h1>

    <ProgressBar Value="progressValue" IsAnimated="true" ShowValue="true" LabelText="Progress of database deletion" />

    if (displayFinalText)
    {
        <div class="row mt-4">
            <h1 class="text-danger">Told ya!</h1>
        </div>
    }
    <div class="mt-4 d-flex justify-content-center align-items-center">
        @if (displayNinja)
        {
            <img src="img/ninja-coder.png" />

        }
    </div>
}
else
{
    <PageTitle>hey, homie!</PageTitle>

    <h1>Hello, world!</h1>

    <div class="d-flex justify-content-between align-content-center">
        <div class="d-flex justify-content-center align-items-center">
            <div>
                <span>This is a Blazor WebAssembly app hosted at GitHub Pages as static files.</span><br />
                <span>I am gonna use this project for Blazor experiments and maybe something like my personal site, blog or whatever this turns into...</span>
            </div>
        </div>
        <div id="profile-pic" class="me-5" style="width:250px;" @onclick="(async() => await StartProgressBar())">
            <img src="/img/ninja-coder.png" width="150" style="cursor: pointer;" />
            <p>Do not click on me..</p>
        </div>
    </div>


    <div class="row mt-2">
        <div class="col">
            <h4>Current development experiment:</h4>
            <ul>
                <li><NavLink href="tetris">Tetris game</NavLink></li>
            </ul>
        </div>
    </div>

    <div class="row mt-4">
        <div class="col">
            <h4>Newest blog posts:</h4>
            <ul>
                <li><NavLink class="text-dec-none" href="/Blog/BlazorSeries">Blazor Series Episode 1 - Intro to WebAssembly, SignalR, Rendering, Hosting models and different types of Blazor project types in .NET 8</NavLink></li>
            </ul>
        </div>
    </div>
}



@code{
    bool displayDiskDeletion = false;
    bool displayNinja = false;
    bool displayFinalText = false;
    int progressValue = 0;

    private async Task StartProgressBar()
    {
        displayDiskDeletion = true;

        for (int i = 0; i < 105; i += 5)
        {
            progressValue = i;
            displayNinja = !displayNinja;
            await Task.Delay(400);
            await InvokeAsync(StateHasChanged);
        }

        displayFinalText = true;
    }

}