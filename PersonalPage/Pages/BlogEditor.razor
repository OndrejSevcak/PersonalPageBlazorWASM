@page "/blog/editor"

@attribute [Authorize]

@inject IJSRuntime _jsRuntime
@inject IStorageService _storageAPI

@using Models.Blog
@using Services.Blog
@using PersonalPage.Components.Blog

<h3>BlogEditor</h3>

<div class="row mt-4">
    <div class="col d-flex justify-content-between">
        <div class="d-flex">
            <button type="button" class="btn btn-light" @onclick="@(() => AddElement("h2"))"><i class="bi bi-type-h2"></i></button>
            <button type="button" class="btn btn-light" @onclick="@(() => AddElement("h4"))"><i class="bi bi-type-h4"></i></button>
            <button type="button" class="btn btn-light" @onclick="@(() => AddElement("p"))"><i class="bi bi-paragraph"></i></button>
            <button type="button" class="btn btn-light" @onclick="@(() => AddElement("code"))"><i class="bi bi-code-slash"></i></button>
            <button type="button" class="btn btn-light" @onclick="@(() => AddElement("html"))"><i class="bi bi-filetype-html"></i></button>
            <button type="button" class="btn btn-light" @onclick="@(() => AddElement("img"))" disabled><i class="bi bi-image"></i></button>
        </div>
        <div>
            <button type="button" class="btn btn-warning" @onclick="(() => _previewFlag = !_previewFlag)">@(_previewFlag ? "Editor mode" : "Preview mode")</button>
        </div>
    </div>
</div>

<hr />

<div class="mt-4">

    @if (_previewFlag)
    {
        <PostBuilder Elements="elements"></PostBuilder>
    }
    else
    {
        <EditForm Model="elements" OnSubmit="(async() => await OnFormSubmit())">
            <div class="container">
                @foreach (var item in elements)
                {
                    <div class="row mt-2">
                        <div class="col">
                            @if (item.TagName == "p")
                            {
                                <div>
                                    <div class="d-flex justify-content-between" style="margin-bottom:2px;">
                                        <div class="d-flex">
                                            <button type="button" class="btn btn-light me-1" @onclick="@(() => InsertTextPlaceholder("bold", item.Id))"><i class="bi bi-type-bold"></i></button>
                                            <button type="button" class="btn btn-light me-1" @onclick="@(() => InsertTextPlaceholder("italic", item.Id))"><i class="bi bi-type-italic"></i></button>
                                            <button type="button" class="btn btn-light me-1" @onclick="@(() => InsertTextPlaceholder("badge", item.Id))"><i class="bi bi-badge-sd-fill"></i></button>
                                            <button type="button" class="btn btn-light me-1" @onclick="@(() => InsertTextPlaceholder("link", item.Id))"><i class="bi bi-link"></i></button>
                                        </div>
                                        <button class="btn btn-light text-danger" @onclick="(() => RemoveElement(item.Id))">X</button>
                                    </div>
                                    <textarea id="paragraph_@item.Id" class="form-control mt-0" @bind="item.Value" placeholder="Paragraph.."></textarea>
                                </div>
                            }
                            else if (item.TagName == "code" || item.TagName == "html")
                            {
                                <div class="d-flex justify-content-between align-items-center">
                                    <span>@(item.TagName == "code" ? "Code section" : "HTML section")</span>
                                    <button class="btn btn-light text-danger" @onclick="(() => RemoveElement(item.Id))">X</button>
                                </div>
                                <textarea class="form-control" @bind="item.Value"></textarea>
                            }
                            else if (item.TagName == "h2" || item.TagName == "h4")
                            {
                                <div class="d-flex justify-content-between align-items-center">
                                    <span>@(item.TagName == "h2" ? "Heading h2" : "Heading h4")</span>
                                    <button class="btn btn-light text-danger" @onclick="(() => RemoveElement(item.Id))">X</button>
                                </div>
                                <input type="text" class="form-control" @bind="item.Value" />
                            }
                        </div>
                    </div>
                }
                @if (elements.Count() > 0)
                {
                    <div class="row mt-5">
                        <div class="col d-flex justify-content-center">
                            <button class="btn btn-warning m-2" type="submit">Save as draft</button>
                            <button class="btn btn-success m-2" type="button">Save and publish</button>
                        </div>
                    </div>
                }
            </div>
        </EditForm>        
    }
</div>



@code {

    bool _previewFlag = false;

    private List<Element> elements = new List<Element>();

    private IJSObjectReference? jsModule;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        jsModule = await _jsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/modules.js");
    }

    private void AddElement(string tagName)
    {
        elements.Add(new Element
        {
            Id = Guid.NewGuid(),
            TagName = tagName
        });
    }

    private void RemoveElement(Guid id)
    {
        elements.RemoveAll(e => e.Id == id);
    }

    private async Task InsertTextPlaceholder(string type, Guid itemId)
    {
        string textToAppend = String.Empty;

        if(type == "bold")
        {
            textToAppend = " <b>BOLDTEXT</b> ";
        }
        else if(type == "italic")
        {
            textToAppend = " <i>ITALIC</i> ";
        }
        else if(type == "badge")
        {
            textToAppend = " <span class=\"badge bg-secondary\">BADGE</span> ";
        }
        else if (type == "link")
        {
            textToAppend = " <a href=\"ADDRESS\" target=\"_blank\">TEXT</a> ";
        }

        await jsModule!.InvokeVoidAsync("appendTextIntoTextArea", "paragraph_" + itemId, textToAppend);
    }

    private async Task OnFormSubmit()
    {
        var post = new PersonalPage.Models.BlogPost
        {
            Id = Guid.NewGuid().ToString(),
            CreatedDateTime = DateTime.Now,
            Title = "title",
            Category = "programming",
            HtmlElements = elements
        };

        await _storageAPI.SaveBlogPostAsJsonToGithubStorageAsync(post); 
    }
}
